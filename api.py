"""
üöÄ API de Pr√©diction des Prix Immobiliers

FastAPI service pour servir les pr√©dictions de prix de maisons.
Bas√© sur le notebook 04_deployment_api.ipynb
"""

import json
import logging
import pickle
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any

import numpy as np
import pandas as pd
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel, Field, validator

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class HouseFeatures(BaseModel):
    """Mod√®le de validation pour les caract√©ristiques de la maison"""

    area: float = Field(..., gt=0, description="Surface en pieds carr√©s")
    bedrooms: int = Field(..., ge=1, le=10, description="Nombre de chambres")
    bathrooms: int = Field(..., ge=1, le=10, description="Nombre de salles de bain")
    stories: int = Field(..., ge=1, le=5, description="Nombre d'√©tages")
    mainroad: int = Field(..., ge=0, le=1, description="Acc√®s route principale (0/1)")
    guestroom: int = Field(..., ge=0, le=1, description="Chambre d'amis (0/1)")
    basement: int = Field(..., ge=0, le=1, description="Sous-sol (0/1)")
    hotwaterheating: int = Field(
        ..., ge=0, le=1, description="Chauffage eau chaude (0/1)"
    )
    airconditioning: int = Field(..., ge=0, le=1, description="Climatisation (0/1)")
    parking: int = Field(..., ge=0, le=5, description="Places de parking")
    prefarea: int = Field(..., ge=0, le=1, description="Zone pr√©f√©r√©e (0/1)")
    furnishingstatus: int = Field(
        ...,
        ge=0,
        le=2,
        description="√âtat ameublement (0=vide, 1=semi-meubl√©, 2=meubl√©)",
    )

    @validator("area")
    def validate_area(cls, v):
        if v < 1000 or v > 20000:
            raise ValueError("Surface doit √™tre entre 1,000 et 20,000 sq ft")
        return v


class PredictionResponse(BaseModel):
    """Mod√®le de r√©ponse pour les pr√©dictions"""

    price: float = Field(..., description="Prix pr√©dit")
    formatted_price: str = Field(..., description="Prix format√©")
    price_per_sqft: float = Field(..., description="Prix par pied carr√©")
    confidence: str = Field(..., description="Niveau de confiance")
    features_used: Dict[str, Any] = Field(..., description="Caract√©ristiques utilis√©es")
    prediction_time: str = Field(..., description="Timestamp de la pr√©diction")


class ModelInfo(BaseModel):
    """Informations sur le mod√®le"""

    model_type: str
    performance_metrics: Optional[Dict]
    feature_names: List[str]
    training_date: Optional[str]
    model_version: str


class HousePricePredictor:
    """Service de pr√©diction des prix de maisons"""

    def __init__(self, model=None, feature_names=None):
        self.model = model
        self.feature_names = feature_names or [
            "area",
            "bedrooms",
            "bathrooms",
            "stories",
            "mainroad",
            "guestroom",
            "basement",
            "hotwaterheating",
            "airconditioning",
            "parking",
            "prefarea",
            "furnishingstatus",
        ]
        self.model_info = {}

        if model is None:
            self.load_model()

    def load_model(self):
        """Charge le mod√®le et ses m√©tadonn√©es"""
        models_path = Path("models")

        if not models_path.exists():
            raise FileNotFoundError("Dossier 'models' non trouv√©")

        # Chercher le mod√®le
        model_files = list(models_path.glob("best_model_*.pkl"))
        if not model_files:
            raise FileNotFoundError("Aucun mod√®le trouv√© dans 'models/'")

        model_file = model_files[0]  # Prendre le premier trouv√©
        logger.info(f"Chargement du mod√®le: {model_file.name}")

        # Charger le mod√®le
        with open(model_file, "rb") as f:
            self.model = pickle.load(f)

        # Charger les m√©tadonn√©es
        metadata_files = list(models_path.glob("model_metadata_*.json"))
        if metadata_files:
            with open(metadata_files[0], "r") as f:
                metadata = json.load(f)
                self.model_info = metadata
                if "data_info" in metadata and "feature_names" in metadata["data_info"]:
                    self.feature_names = metadata["data_info"]["feature_names"]

        logger.info(f"Mod√®le charg√©: {type(self.model).__name__}")

    def predict(self, features: Dict) -> Dict:
        """Pr√©dit le prix d'une maison"""
        if self.model is None:
            raise Exception("Mod√®le non charg√©")

        try:
            # Cr√©er un DataFrame avec feature engineering
            df = pd.DataFrame([features])

            # Feature engineering (identique √† l'entra√Ænement)
            df["price_per_sqft"] = 0  # Placeholder, sera calcul√© apr√®s pr√©diction
            df["rooms_total"] = df["bedrooms"] + df["bathrooms"]
            df["area_per_room"] = df["area"] / df["rooms_total"]
            df["bathroom_bedroom_ratio"] = df["bathrooms"] / df["bedrooms"]
            df["luxury_score"] = (
                df["airconditioning"]
                + df["parking"] / 2
                + df["prefarea"]
                + df["guestroom"]
                + df["basement"]
            )
            df["has_luxury"] = (df["luxury_score"] > 2).astype(int)
            df["area_bedrooms_interaction"] = df["area"] * df["bedrooms"]
            df["luxury_area_interaction"] = df["luxury_score"] * df["area"]

            # Cat√©gories de taille
            size_conditions = [
                (df["area"] <= 3000),
                (df["area"] <= 6000),
                (df["area"] <= 10000),
                (df["area"] > 10000),
            ]
            size_choices = ["small", "medium", "large", "very_large"]
            df["size_category"] = np.select(
                size_conditions, size_choices, default="medium"
            )

            # One-hot encoding pour size_category
            for category in ["small", "medium", "very_large"]:
                df[f"size_category_{category}"] = (
                    df["size_category"] == category
                ).astype(int)

            # S√©lectionner les features dans le bon ordre
            feature_values = []
            for name in self.feature_names:
                if name in df.columns:
                    feature_values.append(df[name].iloc[0])
                else:
                    logger.warning(f"Feature manquante: {name}")
                    feature_values.append(0)  # Valeur par d√©faut

            feature_array = np.array(feature_values).reshape(1, -1)

            # Pr√©diction
            predicted_price = self.model.predict(feature_array)[0]

            # Calculer le prix par pied carr√© r√©el
            area_value = features["area"]
            price_per_sqft_value = predicted_price / area_value

            # D√©terminer le niveau de confiance
            confidence = self._calculate_confidence(features, predicted_price)

            result = {
                "price": float(predicted_price),
                "formatted_price": f"${predicted_price:,.0f}",
                "price_per_sqft": float(price_per_sqft_value),
                "confidence": confidence,
                "features_used": features,
                "prediction_time": datetime.now().isoformat(),
            }

            return result

        except Exception as e:
            logger.error(f"Erreur de pr√©diction: {e}")
            raise Exception(f"Erreur de pr√©diction: {str(e)}")

    def _calculate_confidence(self, features: Dict, price: float) -> str:
        """Calcule un niveau de confiance bas√© sur les caract√©ristiques"""
        # Heuristiques simples pour la confiance
        area = features["area"]
        bedrooms = features["bedrooms"]

        # V√©rifications de coh√©rence
        if area < 2000 and bedrooms > 4:
            return "Faible"
        elif area > 10000 and bedrooms < 3:
            return "Moyenne"
        elif 50 <= price / area <= 200:  # Prix par sq ft raisonnable
            return "√âlev√©e"
        else:
            return "Moyenne"

    def get_model_info(self) -> Dict:
        """Retourne les informations du mod√®le"""
        return {
            "model_type": type(self.model).__name__ if self.model else "Non charg√©",
            "performance_metrics": self.model_info.get("performance", {}),
            "feature_names": self.feature_names,
            "training_date": self.model_info.get("training_date", "Inconnue"),
            "model_version": self.model_info.get("model_version", "1.0.0"),
        }


# Initialisation de l'API
app = FastAPI(
    title="House Price Predictor API",
    description="API de pr√©diction des prix immobiliers bas√©e sur l'apprentissage automatique",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Servir les fichiers statiques
try:
    app.mount("/static", StaticFiles(directory="static"), name="static")
except Exception:
    logger.warning("Dossier 'static' non trouv√© - fichiers statiques non disponibles")

# Initialiser le service de pr√©diction
try:
    predictor = HousePricePredictor()
    logger.info("Service de pr√©diction initialis√© avec succ√®s")
except Exception as e:
    logger.error(f"Erreur d'initialisation du service: {e}")
    predictor = None


@app.get("/")
async def root():
    """Page d'accueil de l'API"""
    return {
        "message": "House Price Predictor API",
        "version": "1.0.0",
        "status": "active" if predictor else "error",
        "endpoints": {
            "predict": "/predict",
            "health": "/health",
            "model_info": "/model/info",
            "docs": "/docs",
        },
    }


@app.get("/health")
async def health_check():
    """V√©rification de l'√©tat de sant√© de l'API"""
    if predictor is None or predictor.model is None:
        raise HTTPException(
            status_code=503, detail="Service non disponible - mod√®le non charg√©"
        )

    return {
        "status": "healthy",
        "model_loaded": True,
        "timestamp": datetime.now().isoformat(),
    }


@app.post("/predict", response_model=PredictionResponse)
async def predict_price(features: HouseFeatures):
    """Pr√©dit le prix d'une maison bas√© sur ses caract√©ristiques"""
    if predictor is None:
        raise HTTPException(status_code=503, detail="Service non disponible")

    # Convertir en dictionnaire
    features_dict = features.dict()

    # Faire la pr√©diction
    result = predictor.predict(features_dict)

    return PredictionResponse(**result)


@app.get("/model/info", response_model=ModelInfo)
async def get_model_info():
    """Retourne les informations sur le mod√®le actuel"""
    if predictor is None:
        raise HTTPException(status_code=503, detail="Service non disponible")

    info = predictor.get_model_info()
    return ModelInfo(**info)


@app.get("/predict/example")
async def get_example_prediction():
    """Exemple de pr√©diction avec des donn√©es par d√©faut"""
    if predictor is None:
        raise HTTPException(status_code=503, detail="Service non disponible")

    example_features = {
        "area": 7420,
        "bedrooms": 4,
        "bathrooms": 1,
        "stories": 3,
        "mainroad": 1,
        "guestroom": 0,
        "basement": 0,
        "hotwaterheating": 0,
        "airconditioning": 1,
        "parking": 2,
        "prefarea": 1,
        "furnishingstatus": 1,
    }

    result = predictor.predict(example_features)
    return {"example_input": example_features, "prediction": result}


if __name__ == "__main__":
    import uvicorn

    print("üè† D√©marrage de l'API House Price Predictor...")
    print("üìã Interface disponible sur: http://localhost:8000")
    print("üìö Documentation sur: http://localhost:8000/docs")
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
